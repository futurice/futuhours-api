create table futuhours.apikeys (
  fum_username TEXT PRIMARY KEY,
  planmill_apikey TEXT NOT NULL
);

-------------------------------------------------------------------------------
-- Generic cache for planmill requests
-------------------------------------------------------------------------------

create table futuhours.cache (
  path TEXT PRIMARY KEY,
  updated TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
  r FLOAT NOT NULL DEFAULT random(), -- Used to deterministically decide when entry is outdated
  data BYTEA NOT NULL
);

-- http://stackoverflow.com/questions/1109061/insert-on-duplicate-update-in-postgresql

CREATE OR REPLACE FUNCTION futuhours.upsert_cache(p TEXT, d BYTEA) RETURNS VOID AS
$$
BEGIN
    LOOP
        UPDATE futuhours.cache SET data = d, updated = CURRENT_TIMESTAMP, r = random() WHERE path = p;
        IF found THEN
            RETURN;
        END IF;
        BEGIN
            INSERT INTO futuhours.cache (path, data) VALUES (p, d);
            RETURN;
        EXCEPTION WHEN unique_violation THEN
            -- do nothing, and loop to try the UPDATE again
        END;
    END LOOP;
END;
$$
LANGUAGE plpgsql;


-------------------------------------------------------------------------------
-- Timereports
-------------------------------------------------------------------------------

create table futuhours.timereports (
  tid     INTEGER NOT NULL,
  uid     INTEGER NOT NULL,
  day     DATE NOT NULL,
  updated TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
  r       FLOAT NOT NULL DEFAULT random(),
  data    BYTEA NOT NULL,

  PRIMARY KEY (tid)
);

CREATE INDEX ON futuhours.timereports (uid, day);

-------------------------------------------------------------------------------
-- Some functions
-------------------------------------------------------------------------------

-- plus/minus one quarter of interval, based on value of r = [0, 1]
-- should be close to original interval, as the dependency is cubic.
CREATE OR REPLACE FUNCTION futuhours.variance(t interval, r float) RETURNS interval AS $$
    BEGIN
        RETURN t + (t / 4) * pow(2 * r - 1, 3);
    END;
$$ LANGUAGE plpgsql;

